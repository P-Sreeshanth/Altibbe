import PDFDocument from 'pdfkit';
import fs from 'fs';
import path from 'path';
import { Report, Product } from '@shared/schema';

export interface ReportData {
  product: Product;
  report: Report;
  questions: Array<{ question: string; answer: string }>;
}

export async function generatePDFReport(data: ReportData): Promise<string> {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ margin: 50 });
      const fileName = `report-${data.product.id}-${Date.now()}.pdf`;
      const filePath = path.join(process.cwd(), 'reports', fileName);
      
      // Ensure reports directory exists
      const reportsDir = path.dirname(filePath);
      if (!fs.existsSync(reportsDir)) {
        fs.mkdirSync(reportsDir, { recursive: true });
      }

      const stream = fs.createWriteStream(filePath);
      doc.pipe(stream);

      // Header with logo and title
      doc.fontSize(24)
         .fillColor('#2563EB')
         .text('Product Transparency Report', 50, 50);
      
      doc.fontSize(12)
         .fillColor('#6B7280')
         .text('Generated by Altibbe Platform', 50, 80);

      // Product Information Section
      doc.moveDown(2)
         .fontSize(18)
         .fillColor('#111827')
         .text('Product Information', 50, doc.y);

      doc.moveDown(0.5)
         .fontSize(14)
         .fillColor('#374151')
         .text(`Name: ${data.product.name}`, 50, doc.y)
         .text(`Brand: ${data.product.brand || 'Not specified'}`, 50, doc.y + 20)
         .text(`Category: ${data.product.category}`, 50, doc.y + 20);

      if (data.product.description) {
        doc.moveDown(1)
           .fontSize(12)
           .fillColor('#6B7280')
           .text('Description:', 50, doc.y)
           .text(data.product.description, 50, doc.y + 15, { width: 500 });
      }

      // Transparency Scores Section
      doc.addPage()
         .fontSize(18)
         .fillColor('#111827')
         .text('Transparency Scores', 50, 50);

      const scores = [
        { label: 'Overall Transparency', value: data.report.transparencyScore, color: '#059669' },
        { label: 'Health Impact', value: data.report.healthScore, color: '#10B981' },
        { label: 'Ethical Rating', value: data.report.ethicalScore, color: '#2563EB' },
        { label: 'Environmental Impact', value: data.report.environmentalScore, color: '#F59E0B' }
      ];

      let yPosition = 100;
      scores.forEach(score => {
        // Score label
        doc.fontSize(14)
           .fillColor('#374151')
           .text(score.label, 50, yPosition);

        // Score value
        doc.fontSize(24)
           .fillColor(score.color)
           .text(`${score.value}`, 400, yPosition);

        // Progress bar background
        doc.rect(50, yPosition + 30, 300, 10)
           .fillColor('#E5E7EB')
           .fill();

        // Progress bar fill
        const fillWidth = (score.value / 100) * 300;
        doc.rect(50, yPosition + 30, fillWidth, 10)
           .fillColor(score.color)
           .fill();

        yPosition += 70;
      });

      // Key Findings Section
      doc.addPage()
         .fontSize(18)
         .fillColor('#111827')
         .text('Key Findings', 50, 50);

      if (data.report.keyFindings && data.report.keyFindings.length > 0) {
        yPosition = 100;
        data.report.keyFindings.forEach((finding, index) => {
          doc.circle(60, yPosition + 5, 3)
             .fillColor('#059669')
             .fill();

          doc.fontSize(12)
             .fillColor('#374151')
             .text(finding, 80, yPosition, { width: 450 });

          yPosition += 30;
        });
      }

      // Recommendations Section
      if (data.report.recommendations) {
        doc.moveDown(2)
           .fontSize(18)
           .fillColor('#111827')
           .text('Recommendations', 50, doc.y);

        doc.moveDown(1)
           .fontSize(12)
           .fillColor('#374151')
           .text(data.report.recommendations, 50, doc.y, { width: 500 });
      }

      // Questions and Answers Section
      if (data.questions.length > 0) {
        doc.addPage()
           .fontSize(18)
           .fillColor('#111827')
           .text('Detailed Analysis', 50, 50);

        yPosition = 100;
        data.questions.forEach((qa, index) => {
          if (yPosition > 700) {
            doc.addPage();
            yPosition = 50;
          }

          // Question
          doc.fontSize(12)
             .fillColor('#6B7280')
             .text(`Q${index + 1}: ${qa.question}`, 50, yPosition);

          // Answer
          doc.fontSize(12)
             .fillColor('#374151')
             .text(`A: ${qa.answer || 'Not answered'}`, 50, yPosition + 15, { width: 500 });

          yPosition += 50;
        });
      }

      // Footer
      doc.fontSize(10)
         .fillColor('#9CA3AF')
         .text('Generated by Altibbe - Product Transparency Platform', 50, doc.page.height - 100)
         .text(`Report Date: ${new Date().toLocaleDateString()}`, 50, doc.page.height - 85)
         .text(`Report ID: ${data.report.id}`, 50, doc.page.height - 70);

      doc.end();

      stream.on('finish', () => {
        resolve(fileName);
      });

      stream.on('error', (error) => {
        reject(error);
      });

    } catch (error) {
      reject(error);
    }
  });
}
